This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-27T13:42:02.774Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
CodeBuilder/
  Assets.xcassets/
    AppIcon.appiconset/
      Contents.json
  Preview Content/
    Preview Assets.xcassets/
      Contents.json
  Utils/
    AutoScroller.swift
    SearchBar.swift
  Views/
    DailyChallenge/
      DailyChallengeView.swift
    Home/
      ArticleDetailView.swift
      HomeView.swift
      LearningView.swift
      ResumeView.swift
    Problems/
      Problem.swift
      ProblemDetailView.swift
      ProblemsView.swift
    Search/
      SearchView.swift
    Settings/
      AccountView.swift
      SettingsView.swift
    SignInView.swift
    SignUpView.swift
  CodeBuilderApp.swift
  ContentView.swift
  Info.plist
  ObservableObject.swift
CodeBuilder.xcodeproj/
  project.xcworkspace/
    xcshareddata/
      swiftpm/
        Package.resolved
    contents.xcworkspacedata
  project.pbxproj
CodeBuilderTests/
  CodeBuilderTests.swift
CodeBuilderUITests/
  CodeBuilderUITests.swift
  CodeBuilderUITestsLaunchTests.swift
.gitignore

================================================================
Repository Files
================================================================

================
File: CodeBuilder/Assets.xcassets/AppIcon.appiconset/Contents.json
================
{"images":[{"size":"60x60","expected-size":"180","filename":"180.png","folder":"Assets.xcassets/AppIcon.appiconset/","idiom":"iphone","scale":"3x"},{"size":"40x40","expected-size":"80","filename":"80.png","folder":"Assets.xcassets/AppIcon.appiconset/","idiom":"iphone","scale":"2x"},{"size":"40x40","expected-size":"120","filename":"120.png","folder":"Assets.xcassets/AppIcon.appiconset/","idiom":"iphone","scale":"3x"},{"size":"60x60","expected-size":"120","filename":"120.png","folder":"Assets.xcassets/AppIcon.appiconset/","idiom":"iphone","scale":"2x"},{"size":"57x57","expected-size":"57","filename":"57.png","folder":"Assets.xcassets/AppIcon.appiconset/","idiom":"iphone","scale":"1x"},{"size":"29x29","expected-size":"58","filename":"58.png","folder":"Assets.xcassets/AppIcon.appiconset/","idiom":"iphone","scale":"2x"},{"size":"29x29","expected-size":"29","filename":"29.png","folder":"Assets.xcassets/AppIcon.appiconset/","idiom":"iphone","scale":"1x"},{"size":"29x29","expected-size":"87","filename":"87.png","folder":"Assets.xcassets/AppIcon.appiconset/","idiom":"iphone","scale":"3x"},{"size":"57x57","expected-size":"114","filename":"114.png","folder":"Assets.xcassets/AppIcon.appiconset/","idiom":"iphone","scale":"2x"},{"size":"20x20","expected-size":"40","filename":"40.png","folder":"Assets.xcassets/AppIcon.appiconset/","idiom":"iphone","scale":"2x"},{"size":"20x20","expected-size":"60","filename":"60.png","folder":"Assets.xcassets/AppIcon.appiconset/","idiom":"iphone","scale":"3x"},{"size":"1024x1024","filename":"1024.png","expected-size":"1024","idiom":"ios-marketing","folder":"Assets.xcassets/AppIcon.appiconset/","scale":"1x"}]}

================
File: CodeBuilder/Preview Content/Preview Assets.xcassets/Contents.json
================
{
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

================
File: CodeBuilder/Utils/AutoScroller.swift
================
//
//  AutoScroller.swift
//  CodeBuilder
//
//  Created by aaron perkel on 9/26/24.
//

import SwiftUI

struct AutoScroller: View {
  let tabItems: [TabItem]
  @Binding var path: NavigationPath
  @State private var currentIndex: Int = 0
  @State private var offset: CGFloat = 0 // Offset for the swipe gesture

  var body: some View {
    VStack(spacing: 0) { // Remove default spacing
      GeometryReader { geometry in
        HStack(spacing: 0) {
          ForEach(tabItems.indices, id: \.self) { index in
            VStack {
              Image(systemName: tabIcon(for: tabItems[index].title))
                .resizable()
                .scaledToFit()
                .frame(height: 100)
                .foregroundStyle(tabItems[index].color)
              Text(tabItems[index].title)
                .font(.headline)
                .foregroundStyle(Color.primary)
            }
            .frame(width: geometry.size.width)
            .contentShape(Rectangle()) // Make the entire area tappable
            .onTapGesture {
              path.append(tabItems[index].destination)
            }
          }
        }
        .offset(x: -CGFloat(currentIndex) * geometry.size.width + offset)
        .gesture(
          DragGesture()
            .onChanged { value in
              offset = value.translation.width
            }
            .onEnded { value in
              let threshold = geometry.size.width / 4
              var newIndex = currentIndex

              if -value.translation.width > threshold {
                newIndex = min(currentIndex + 1, tabItems.count - 1)
              } else if value.translation.width > threshold {
                newIndex = max(currentIndex - 1, 0)
              }

              withAnimation(.easeOut) {
                offset = 0
                currentIndex = newIndex
              }
            })
      }
      .frame(height: 150) // Set a fixed height for the main content

      // Page Indicator
      HStack {
        ForEach(tabItems.indices, id: \.self) { index in
          Capsule()
            .fill(Color.primary.opacity(currentIndex == index ? 1 : 0.33))
            .frame(width: 45, height: 8)
            .onTapGesture {
              withAnimation(.easeOut) {
                currentIndex = index
              }
            }
        }
      }
      .frame(height: 30) // Set a fixed height for the page indicator
    }
    .frame(height: 150) // Set the total height of the AutoScroller
    .padding(.top, 30)
  }

  func tabIcon(for tabItem: String) -> String {
    switch tabItem {
    case "Problems":
      return "doc.text.fill"
    case "Learning":
      return "book.fill"
    case "Resume Tips":
      return "briefcase.fill"
    default:
      return "questionmark"
    }
  }
}

#Preview{
  HomeView()
}

================
File: CodeBuilder/Utils/SearchBar.swift
================
//
//  SearchBar.swift
//  CodeBuilder
//
//  Created by aaron perkel on 9/26/24.
//


import SwiftUI

struct SearchBar: View {
  @Binding var text: String
  @State private var isEditing = false

  var body: some View {
    HStack {
      // Search field
      HStack {
        Image(systemName: "magnifyingglass")
          .foregroundColor(.gray)
          .padding(.leading, 8)

        TextField("Search", text: $text, onEditingChanged: { editing in
          withAnimation {
            self.isEditing = editing
          }
        })
        .foregroundColor(.primary)
        .autocapitalization(.none)
        .disableAutocorrection(true)

        if !text.isEmpty {
          Button(action: {
            self.text = ""
          }) {
            Image(systemName: "multiply.circle.fill")
              .foregroundColor(.gray)
          }
          .padding(.trailing, 8)
          .transition(.opacity)
        }
      }
      .padding(EdgeInsets(top: 8, leading: 0, bottom: 8, trailing: 0))
      .background(Color(.systemGray6))
      .cornerRadius(10.0)

      if isEditing {
        Button(action: {
          withAnimation {
            self.isEditing = false
            self.text = ""
            hideKeyboard()
          }
        }) {
          Text("Cancel")
        }
        .padding(.leading, 5)
//        .transition(.move(edge: .trailing))
      }
    }
    .padding(.horizontal)
  }
}

#if canImport(UIKit)
extension View {
  func hideKeyboard() {
    UIApplication.shared.sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)
  }
}
#endif

#Preview {
  SearchBar(text: .constant(""))
}

================
File: CodeBuilder/Views/DailyChallenge/DailyChallengeView.swift
================
//
//  DailyChallengeView.swift
//  CodeBuilder
//
//  Created by aaron perkel on 9/25/24.
//

import SwiftUI

struct DailyChallengeView: View {
    // Define or fetch the daily challenge problem
    let dailyProblem: Problem

    init() {
        // For this example, we'll define the daily challenge problem here.
        dailyProblem = Problem(
            title: "Daily Challenge: Factorial Function",
            description: "Arrange the code blocks to correctly implement a factorial function.",
            difficulty: "Medium",
            articleURL: URL(string: "https://www.example.com/articles/factorial-function")!,
            availableBlocks: ["func factorial(n: Int) -> Int {", "return n * factorial(n - 1)", "if n <= 1 { return 1 }", "}"],
            correctSolution: ["func factorial(n: Int) -> Int {", "if n <= 1 { return 1 }", "return n * factorial(n - 1)", "}"]
        )
    }

    var body: some View {
        NavigationStack {
            ProblemDetailView(problem: dailyProblem)
                .navigationBarTitleDisplayMode(.large)
        }
    }
}

#Preview {
    DailyChallengeView()
}

================
File: CodeBuilder/Views/Home/ArticleDetailView.swift
================
//
//  ArticleDetailView.swift
//  CodeBuilder
//
//  Created by Miro Gohacki on 9/24/24.
//

import SwiftUICore
import SwiftUI

struct ArticleDetailView: View {
    let articleTitle: String

    var body: some View {
        ScrollView {
            Text(getArticleContent())
                .padding()
        }
        .navigationTitle(articleTitle)
    }

    func getArticleContent() -> String {
        switch articleTitle {
        case "Introduction to Arrays":
            return "Arrays are collections of elements..."
        case "Understanding Recursion":
            return "Recursion is a method where the solution..."
        default:
            return "Content not available."
        }
    }
}

#Preview {
  ArticleDetailView(articleTitle: "Preview")
}

================
File: CodeBuilder/Views/Home/HomeView.swift
================
//
//  HomeView.swift
//  CodeBuilder
//
//  Created by aaron perkel on 9/25/24.
//

import SwiftUI

struct TabItem {
  let title: String
  let color: Color
  let destination: TabDestination
}

enum TabDestination: Hashable {
  case problems
  case learning
  case resumeTips
}

// Home Page
struct HomeView: View {
  let tabItems: [TabItem] = [
    TabItem(title: "Problems", color: .blue, destination: .problems),
    TabItem(title: "Learning", color: .orange, destination: .learning),
    TabItem(title: "Resume Tips", color: .brown, destination: .resumeTips)
  ]
  
  @State private var path = NavigationPath()
  
  var body: some View {
    NavigationStack(path: $path) {
      VStack {
        AutoScroller(tabItems: tabItems, path: $path)
        
        List {
          Text("Maybe here we can have like")
          Text("stats or some other useful info")
        }
        .navigationTitle("Home")
        .navigationBarTitleDisplayMode(.large)
      }
      .navigationDestination(for: TabDestination.self) { destination in
        switch destination {
        case .problems:
          ProblemsView()
        case .learning:
          LearningView()
        case .resumeTips:
          ResumeView()
        }
      }
    }
  }
}

#Preview {
  HomeView()
}

================
File: CodeBuilder/Views/Home/LearningView.swift
================
//
//  LearningView.swift
//  CodeBuilder
//
//  Created by Miro Gohacki on 9/24/24.
//

import SwiftUICore
import SwiftUI

struct LearningView: View {
    let articles = ["Introduction to Arrays", "Understanding Recursion"]

    var body: some View {
        List(articles, id: \.self) { article in
            NavigationLink(destination: ArticleDetailView(articleTitle: article)) {
                Text(article)
                    .font(.headline)
            }
        }
        .navigationTitle("Learning")
    }
}

================
File: CodeBuilder/Views/Home/ResumeView.swift
================
//
//  ResumeView.swift
//  CodeBuilder
//
//  Created by Miro Gohacki on 9/24/24.
//

import SwiftUICore
import SwiftUI

struct ResumeView: View {
    let articles = ["Introduction to Arrays", "Understanding Recursion"]

    var body: some View {
        List(articles, id: \.self) { article in
            NavigationLink(destination: ArticleDetailView(articleTitle: article)) {
                Text(article)
                    .font(.headline)
            }
        }
        .navigationTitle("Resume Tips")
    }
}

#Preview {
  ResumeView()
}

================
File: CodeBuilder/Views/Problems/Problem.swift
================
//
//  Problem.swift
//  CodeBuilder
//
//  Created by Miro Gohacki on 10/17/24.
//

import Foundation

struct Problem: Identifiable {
    let id = UUID()
    let title: String
    let description: String
    let difficulty: String
    let articleURL: URL
    let availableBlocks: [String]
    let correctSolution: [String]
}

================
File: CodeBuilder/Views/Problems/ProblemDetailView.swift
================
//
//  ProblemDetailView.swift
//  CodeBuilder
//
//  Created by Miro Gohacki on 9/24/24.
//
// ProblemDetailView.swift

import SwiftUI

struct ProblemDetailView: View {
    let problem: Problem
    @State private var availableBlocks: [String]
    @State private var arrangedBlocks: [String?]
    @State private var blockCorrectness: [Bool?]
    @State private var isProblemSolved = false
    @EnvironmentObject var userStatsViewModel: UserStatsViewModel
    @Environment(\.openURL) var openURL

    init(problem: Problem) {
        self.problem = problem
        _availableBlocks = State(initialValue: problem.availableBlocks.shuffled())
        _arrangedBlocks = State(initialValue: Array(repeating: nil, count: problem.correctSolution.count))
        _blockCorrectness = State(initialValue: Array(repeating: nil, count: problem.correctSolution.count))
    }

    var body: some View {
        ScrollView {
            VStack(alignment: .leading) {
                if isProblemSolved {
                    Text("Congratulations! You've solved this problem.")
                        .font(.headline)
                        .foregroundColor(.green)
                        .padding()
                }

                Text(problem.title)
                    .font(.title)
                    .padding()

                Text(problem.description)
                    .padding(.bottom)

                Text("Difficulty: \(problem.difficulty)")
                    .font(.subheadline)
                    .foregroundColor(.gray)
                    .padding(.bottom)

                // Adjusted layout
                VStack(alignment: .leading, spacing: 20) {
                    // Available Blocks Section
                    VStack(alignment: .leading) {
                        Text("Available Blocks")
                            .font(.headline)
                        ScrollView(.horizontal) {
                            HStack {
                                ForEach(availableBlocks, id: \.self) { block in
                                    CodeBlockView(code: block, backgroundColor: Color.blue.opacity(0.1))
                                }
                            }
                        }
                    }
                    .padding()

                    // Your Solution Section
                    VStack(alignment: .leading) {
                        Text("Your Solution")
                            .font(.headline)

                        ForEach(0..<arrangedBlocks.count, id: \.self) { index in
                            ZStack(alignment: .leading) {
                                Rectangle()
                                    .fill(Color.gray.opacity(0.1))
                                    .cornerRadius(5)

                                if let block = arrangedBlocks[index] {
                                    CodeBlockView(code: block, backgroundColor: blockBackgroundColor(for: index))
                                } else {
                                    Text("Drop Here")
                                        .foregroundColor(.gray)
                                        .padding()
                                }
                            }
                            .onDrop(of: [.text], isTargeted: nil) { providers in
                                handleDrop(providers: providers, at: index)
                            }
                        }
                    }
                    .padding()
                }

                // Buttons Section
                HStack {
                    Button(action: checkSolution) {
                        Text("Check Solution")
                            .font(.headline)
                            .padding()
                            .background(Color.accentColor)
                            .foregroundColor(.white)
                            .cornerRadius(10)
                    }
                    .padding()

                    Button(action: resetSolution) {
                        Text("Reset")
                            .font(.headline)
                            .padding()
                            .background(Color.red)
                            .foregroundColor(.white)
                            .cornerRadius(10)
                    }
                    .padding()
                }

                Button(action: {
                    openURL(problem.articleURL)
                }) {
                    Text("Read Article")
                        .font(.headline)
                        .padding()
                        .background(Color.green)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                }
                .padding()
            }
            .padding()
        }
    }

    // Function to handle drop operations
    func handleDrop(providers: [NSItemProvider], at index: Int) -> Bool {
        if let provider = providers.first {
            provider.loadObject(ofClass: String.self) { (object, error) in
                DispatchQueue.main.async {
                    if let item = object {
                        // If the block is already placed somewhere else, remove it first
                        if let existingIndex = arrangedBlocks.firstIndex(where: { $0 == item }) {
                            arrangedBlocks[existingIndex] = nil
                            blockCorrectness[existingIndex] = nil
                        }

                        // Return the existing block in the slot to availableBlocks
                        if let existingBlock = arrangedBlocks[index] {
                            availableBlocks.append(existingBlock)
                        }

                        // Remove the item from availableBlocks
                        if let blockIndex = availableBlocks.firstIndex(of: item) {
                            availableBlocks.remove(at: blockIndex)
                        }

                        arrangedBlocks[index] = item
                        blockCorrectness[index] = nil // Reset correctness when the solution changes
                    }
                }
            }
            return true
        }
        return false
    }

    // Function to determine block background color after checking
    func blockBackgroundColor(for index: Int) -> Color {
        if let isCorrect = blockCorrectness[index] {
            return isCorrect ? Color.green.opacity(0.1) : Color.red.opacity(0.1)
        } else {
            return Color.clear
        }
    }
    
    func isSolutionCorrect() -> Bool {
        for index in 0..<arrangedBlocks.count {
            if arrangedBlocks[index] != problem.correctSolution[index] {
                return false
            }
        }
        return true
    }

    // Function to check the solution
    func checkSolution() {
        for index in 0..<arrangedBlocks.count {
            if let block = arrangedBlocks[index] {
                blockCorrectness[index] = (block == problem.correctSolution[index])
            } else {
                blockCorrectness[index] = false
            }
        }
    }

    // Function to reset the solution
    func resetSolution() {
        // Move blocks back to availableBlocks
        for block in arrangedBlocks.compactMap({ $0 }) {
            availableBlocks.append(block)
        }
        arrangedBlocks = Array(repeating: nil, count: problem.correctSolution.count)
        blockCorrectness = Array(repeating: nil, count: problem.correctSolution.count)
    }
}

struct CodeBlockView: View {
    let code: String
    let backgroundColor: Color
    var body: some View {
        Text(code)
            .font(.system(.body, design: .monospaced))
            .foregroundColor(.primary)
            .padding()
            .background(backgroundColor)
            .cornerRadius(5)
            .draggable(code)
    }
}

#Preview {
    ProblemDetailView(problem: Problem(
        title: "Sample Problem",
        description: "Arrange the code blocks to complete the function",
        difficulty: "Easy",
        articleURL: URL(string: "https://www.example.com/articles/sample-problem")!,
        availableBlocks: ["func example() {", "print(\"Sample\")", "}"],
        correctSolution: ["func example() {", "print(\"Sample\")", "}"]
    ))
    .environmentObject(UserStatsViewModel())
}

================
File: CodeBuilder/Views/Problems/ProblemsView.swift
================
//
//  ProblemsView.swift
//  CodeBuilder
//
//  Created by Miro Gohacki on 9/24/24.
//

import SwiftUICore
import SwiftUI

struct ProblemsView: View {
    @EnvironmentObject var userStatsViewModel: UserStatsViewModel
    let problems: [Problem] = [
        Problem(
            title: "Print Hello World",
            description: "Arrange the code blocks to print 'Hello World'",
            difficulty: "Easy",
            articleURL: URL(string: "https://www.example.com/articles/hello-world")!,
            availableBlocks: ["func greet() {", "print(\"Hello World\")", "}"],
            correctSolution: ["func greet() {", "print(\"Hello World\")", "}"]
        ),
        Problem(
            title: "Calculate Sum",
            description: "Arrange the code blocks to calculate the sum of two numbers",
            difficulty: "Medium",
            articleURL: URL(string: "https://www.example.com/articles/calculate-sum")!,
            availableBlocks: ["let sum = a + b", "let a = 5", "let b = 10"],
            correctSolution: ["let a = 5", "let b = 10", "let sum = a + b"]
        ),
        // Add more problems here
    ]
    var body: some View {
        NavigationView {
            List(problems) { problem in
                NavigationLink(destination: ProblemDetailView(problem: problem)) {
                    VStack(alignment: .leading) {
                        HStack {
                            Text(problem.title)
                                .font(.headline)
                            if userStatsViewModel.solvedProblemIDs.contains(problem.id.uuidString) {
                                Image(systemName: "checkmark.circle.fill")
                                    .foregroundColor(.green)
                            }
                        }
                        Text("Difficulty: \(problem.difficulty)")
                            .font(.subheadline)
                            .foregroundColor(.gray)
                    }
                }
            }
            .navigationTitle("Problems")
        }
    }
}

#Preview {
    ProblemsView()
        .environmentObject(UserStatsViewModel())
}

================
File: CodeBuilder/Views/Search/SearchView.swift
================
//
//  SearchView.swift
//  CodeBuilder
//
//  Created by aaron perkel on 9/25/24.
//

import SwiftUI

struct SearchView: View {
  @State private var searchText = ""
  var body: some View {
    NavigationStack {
      SearchBar(text: $searchText)
      List {
        Section {
          Text("Search View")
          Text("This will include types of problems")
          Text("Imagine the spotify search page")
          Text("Blocky and pictures and stuff")
          Text("Top 150 Interview Questions")
        }
      }
      .navigationTitle("Search")
      .navigationBarTitleDisplayMode(.large)
    }
  }
}

#Preview {
  SearchView()
}

================
File: CodeBuilder/Views/Settings/AccountView.swift
================
import SwiftUI

struct AccountView: View {
    @EnvironmentObject var authViewModel: AuthViewModel

    var body: some View {
        NavigationStack {
            VStack(spacing: 12) {
                Image(systemName: "person.fill")
                    .resizable()
                    .frame(width: 70, height: 70)
                    .clipShape(Circle())
                    .foregroundStyle(.blue)
                    .padding(.top, 25)

                VStack(spacing: 2) {
                    Text(authViewModel.user?.displayName ?? "No Name")
                        .font(.system(size: 28, weight: .semibold))
                    Text(verbatim: authViewModel.user?.email ?? "No Email")
                        .font(.system(size: 18))
                        .foregroundColor(.gray)
                }

                List {
                    Section {
                        NavigationLink(destination: Text("Personal Information")) {
                            HStack {
                                Image(systemName: "person.text.rectangle.fill")
                                    .foregroundColor(.blue)
                                Text("Personal Information")
                            }
                        }

                        NavigationLink(destination: Text("Subscription Info")) {
                            HStack {
                                Image(systemName: "plus.arrow.trianglehead.clockwise")
                                    .foregroundColor(.blue)
                                Text("Subscriptions")
                            }
                        }
                    }

                    Section {
                        Button(action: {
                            authViewModel.signOut()
                        }) {
                            Text("Sign Out")
                                .frame(maxWidth: .infinity)
                                .foregroundColor(.red)
                        }
                    }
                }
                .listStyle(InsetGroupedListStyle())
            }
            .navigationTitle("CodeBuilder Account")
            .navigationBarTitleDisplayMode(.inline)
        }
    }
}

#Preview {
    AccountView()
        .environmentObject(AuthViewModel())
}

================
File: CodeBuilder/Views/Settings/SettingsView.swift
================
import SwiftUI

struct SettingsView: View {
    @EnvironmentObject var authViewModel: AuthViewModel
    @State private var searchText = ""
    @State private var showingSignIn = false

    var body: some View {
        NavigationStack {
            SearchBar(text: $searchText)
            List {
                Section {
                    if authViewModel.isSignedIn {
                        // Show account information
                        NavigationLink(destination: AccountView()) {
                            HStack {
                                Image(systemName: "person.fill")
                                    .resizable()
                                    .frame(width: 50, height: 50)
                                    .clipShape(Circle())
                                    .foregroundStyle(.blue)
                                    .padding(.trailing, 8)
                                
                                VStack(alignment: .leading, spacing: 4) {
                                    Text(authViewModel.user?.displayName ?? "No Name")
                                        .font(.system(size: 20, weight: .semibold))
                                    Text("Account, CodeBuilder+, and more")
                                        .font(.system(size: 14))
                                        .foregroundColor(.gray)
                                }
                            }
                            .padding(.vertical, 8)
                        }
                    } else {
                        // Show sign-in prompt
                        Button(action: {
                            showingSignIn = true
                        }) {
                            HStack {
                                Image(systemName: "person.crop.circle.fill.badge.plus")
                                    .resizable()
                                    .frame(width: 55, height: 50)
                                    .foregroundStyle(.blue)
                                    .padding(.trailing, 8)
                                
                                VStack(alignment: .leading, spacing: 4) {
                                    Text("Sign In")
                                        .font(.system(size: 20, weight: .semibold))
                                    Text("Access your account and more")
                                        .font(.system(size: 14))
                                        .foregroundColor(.gray)
                                }
                            }
                            .padding(.vertical, 8)
                        }
                        .sheet(isPresented: $showingSignIn) {
                            SignInView()
                                .environmentObject(authViewModel)
                        }
                    }
                }
                .padding(.top, 5)
                .padding(.bottom, 5)
                
                // Other settings sections...
                Section {
                    NavigationLink(destination: Text("General Settings")) {
                        HStack {
                            Image(systemName: "gear")
                                .foregroundColor(.white)
                                .font(.system(size: 18))
                                .background(
                                    RoundedRectangle(cornerRadius: 8)
                                        .fill(Color(.systemGray2))
                                        .frame(width: 28, height: 28)
                                )
                                .padding(.trailing, 4)
                            Text("General")
                        }
                    }
                    
                    NavigationLink(destination: Text("Notification Settings")) {
                        HStack {
                            Image(systemName: "bell.badge.fill")
                                .foregroundColor(.white)
                                .font(.system(size: 18))
                                .background(
                                    RoundedRectangle(cornerRadius: 8)
                                        .fill(Color(.red))
                                        .frame(width: 28, height: 28)
                                )
                                .padding(.trailing, 4)
                            Text("Notifications")
                        }
                    }
                    
                    NavigationLink(destination: Text("Widget Settings")) {
                        HStack {
                            Image(systemName: "widget.small")
                                .foregroundColor(.white)
                                .font(.system(size: 18))
                                .background(
                                    RoundedRectangle(cornerRadius: 8)
                                        .fill(Color(.orange))
                                        .frame(width: 28, height: 28)
                                )
                                .padding(.trailing, 4)
                            Text("Widgets")
                        }
                    }
                }
            }
            .navigationTitle("Settings")
            .navigationBarTitleDisplayMode(.large)
        }
    }
}

#Preview {
    SettingsView()
        .environmentObject(AuthViewModel())
}

================
File: CodeBuilder/Views/SignInView.swift
================
//
//  SignIn.swift
//  CodeBuilder
//
//  Created by Miro Gohacki on 10/1/24.
//

import SwiftUI
import AuthenticationServices // For SignInWithAppleButton

struct SignInView: View {
    @EnvironmentObject var authViewModel: AuthViewModel
    @Environment(\.dismiss) var dismiss
    @Environment(\.colorScheme) var colorScheme
    @State private var email = ""
    @State private var password = ""
    @State private var showingSignUp = false
    @State private var showingAlert = false

    var body: some View {
        NavigationStack {
            VStack {
                Spacer()
                
                Text("CodeBuilder")
                    .font(.largeTitle)
                    .bold()
                    .padding(.bottom, 20)
                
                // Custom input fields
                VStack(spacing: 16) {
                    TextField("Email", text: $email)
                        .keyboardType(.emailAddress)
                        .autocapitalization(.none)
                        .disableAutocorrection(true)
                        .padding()
                        .background(Color(.systemGray6))
                        .cornerRadius(10)
                        .padding(.horizontal)
                    SecureField("Password", text: $password)
                        .padding()
                        .background(Color(.systemGray6))
                        .cornerRadius(10)
                        .padding(.horizontal)
                }
                .padding(.bottom, 20)
                
                Button("Sign In") {
                    authViewModel.signIn(email: email, password: password)
                }
                .buttonStyle(.borderedProminent)
                .cornerRadius(10)
                .padding(.horizontal)
                .padding(.bottom, 10)
                
                // Improved Separator
                HStack {
                    Rectangle()
                        .frame(height: 1)
                        .foregroundColor(Color.gray.opacity(0.5))
                    Text("OR")
                        .foregroundColor(.gray)
                        .padding(.horizontal, 8)
                    Rectangle()
                        .frame(height: 1)
                        .foregroundColor(Color.gray.opacity(0.5))
                }
                .padding(.vertical, 10)
                .padding(.horizontal)
                .padding(.bottom, 10)
                
                // Social Sign-In Buttons
                VStack(spacing: 10) {
                    SignInWithAppleButton(
                        onRequest: { request in
                            // Handle request
                        },
                        onCompletion: { result in
                            // Handle completion
                        }
                    )
                    .signInWithAppleButtonStyle(
                      // TODO: this isnt working ? always stays black
                      colorScheme == .dark ? .white : .black
                    )
                    .frame(height: 52)
                    .cornerRadius(10)
                    .padding(.horizontal)
                    .padding(.bottom, 15)
                }
                .padding(.bottom, 20)
                
                Spacer()
                
                // Improved Sign Up Prompt
                HStack {
                    Text("Don't have an account?")
                        .foregroundColor(.secondary)
                  NavigationLink(destination: SignUpView().environmentObject(authViewModel)) {
                    Text("Sign Up")
                      .bold()
                  }
                }
                .padding(.bottom, 20)
                .sheet(isPresented: $showingSignUp) {
                    SignUpView()
                        .environmentObject(authViewModel)
                }
            }
            .navigationTitle("Sign In")
            .navigationBarTitleDisplayMode(.inline)
            .alert(isPresented: $showingAlert) {
                Alert(
                    title: Text("Error"),
                    message: Text(authViewModel.authErrorMessage ?? "An error occurred"),
                    dismissButton: .default(Text("OK"))
                )
            }
            .onReceive(authViewModel.$authErrorMessage) { errorMessage in
                if errorMessage != nil {
                    showingAlert = true
                }
            }
            .onReceive(authViewModel.$isSignedIn) { isSignedIn in
                if isSignedIn {
                    dismiss()
                }
            }
        }
    }
}

#Preview {
    SignInView()
        .environmentObject(AuthViewModel())
}

================
File: CodeBuilder/Views/SignUpView.swift
================
//
//  SignUpView.swift
//  CodeBuilder
//
//  Created by Miro Gohacki on 10/1/24.
//

import SwiftUI

struct SignUpView: View {
    @EnvironmentObject var authViewModel: AuthViewModel
    @Environment(\.dismiss) var dismiss
    @State private var email = ""
    @State private var password = ""
    @State private var displayName = ""
    @State private var showingAlert = false

    var body: some View {
        NavigationStack {
            VStack {
                Spacer()
                
                Text("Create Account")
                    .font(.largeTitle)
                    .bold()
                    .padding(.bottom, 20)
                
                // Custom input fields
                VStack(spacing: 16) {
                    TextField("Display Name", text: $displayName)
                        .autocapitalization(.none)
                        .disableAutocorrection(true)
                        .padding()
                        .background(Color(.systemGray6))
                        .cornerRadius(10)
                        .padding(.horizontal)
                    
                    TextField("Email", text: $email)
                        .keyboardType(.emailAddress)
                        .autocapitalization(.none)
                        .disableAutocorrection(true)
                        .padding()
                        .background(Color(.systemGray6))
                        .cornerRadius(10)
                        .padding(.horizontal)
                    
                    SecureField("Password", text: $password)
                        .padding()
                        .background(Color(.systemGray6))
                        .cornerRadius(10)
                        .padding(.horizontal)
                }
                .padding(.bottom, 20)
                
                Button("Sign Up") {
                    authViewModel.signUp(email: email, password: password, displayName: displayName)
                }
                .buttonStyle(.borderedProminent)
                .cornerRadius(10)
                .padding(.horizontal)
                .padding(.bottom, 10)
                
                Spacer()
            }
            .navigationTitle("Sign Up")
            .navigationBarTitleDisplayMode(.inline)
            .alert(isPresented: $showingAlert) {
                Alert(
                    title: Text("Error"),
                    message: Text(authViewModel.authErrorMessage ?? "An error occurred"),
                    dismissButton: .default(Text("OK"))
                )
            }
            .onReceive(authViewModel.$authErrorMessage) { errorMessage in
                if errorMessage != nil {
                    showingAlert = true
                }
            }
            .onReceive(authViewModel.$isSignedIn) { isSignedIn in
                if isSignedIn {
                    dismiss()
                }
            }
        }
    }
}

#Preview {
    SignUpView()
        .environmentObject(AuthViewModel())
}

================
File: CodeBuilder/CodeBuilderApp.swift
================
//
//  CodeBuilderApp.swift
//  CodeBuilder
//
//  Created by Miro Gohacki on 9/24/24.
//

import SwiftUI
import Firebase

@main
struct CodeBuilderApp: App {
    @StateObject var authViewModel = AuthViewModel.shared
    @StateObject var userStatsViewModel = UserStatsViewModel()
    
    init() {
        configureFirebase()
    }

    private func configureFirebase() {
        // Ensure Firebase is only configured once
        if FirebaseApp.app() == nil {
            FirebaseApp.configure()
        }
    }

    var body: some Scene {
        WindowGroup {
            ContentView()
                .environmentObject(authViewModel)
                .environmentObject(userStatsViewModel)
        }
    }
}


#Preview {
  ContentView()
    .environmentObject(AuthViewModel())
}

================
File: CodeBuilder/ContentView.swift
================
//
//  ContentView.swift
//  CodeBuilder
//
//  Created by Miro Gohacki on 9/24/24.
//

import SwiftUI

struct ContentView: View {
  @EnvironmentObject var authViewModel: AuthViewModel
    @EnvironmentObject var userStatsViewModel: UserStatsViewModel // Add this line
  var body: some View {
    if !authViewModel.isSignedIn {
      SignInView()
    } else {
      TabView {
        // Home
        NavigationStack {
          HomeView()
            .navigationDestination(for: TabDestination.self) { destination in
              switch destination {
              case .problems:
                ProblemsView()
              case .learning:
                LearningView()
              case .resumeTips:
                ResumeView()
              }
            }
        }
        .tabItem {
          Image(systemName: "house.fill")
          Text("Home")
        }
        
        // Search
        NavigationStack {
          SearchView()
        }
        .tabItem {
          Image(systemName: "magnifyingglass")
          Text("Search")
        }
        
        // Daily Challenge
        NavigationStack {
          DailyChallengeView()
        }
        .tabItem {
          Image(systemName: "calendar")
          Text("Daily Challenge")
        }
        
        // Settings
        NavigationStack {
          SettingsView()
        }
        .tabItem {
          Image(systemName: "gear")
          Text("Settings")
        }
      }
      .accentColor(.blue)
    }
  }
}

#Preview {
  ContentView()
    .environmentObject(AuthViewModel())
}

================
File: CodeBuilder/Info.plist
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleURLTypes</key>
	<array>
		<dict>
			<key>CFBundleTypeRole</key>
			<string>Editor</string>
			<key>CFBundleURLSchemes</key>
			<array>
				<string>com.googleusercontent.apps.583365327881-gn5rj3gan9bcju1iltibdab3jne5iad8</string>
			</array>
		</dict>
	</array>
</dict>
</plist>

================
File: CodeBuilder/ObservableObject.swift
================
//
//  ObservableObject.swift
//  CodeBuilder
//
//  Created by Miro Gohacki on 10/1/24.
//
import Foundation
import FirebaseAuth
import Combine
import GoogleSignIn
import Firebase
import FirebaseFirestore

class AuthViewModel: ObservableObject {
    @Published var user: User?
    @Published var isSignedIn: Bool = false
    @Published var authErrorMessage: String?
    static let shared = AuthViewModel()
    
    private var authStateListenerHandle: AuthStateDidChangeListenerHandle?
    
    init() {
        addListeners()
    }
    
    func createUserProfileInFirestore() {
        guard let userID = Auth.auth().currentUser?.uid else { return }
        let db = Firestore.firestore()
        
        // Reference to the user's Firestore document
        let userRef = db.collection("users").document(userID)
        
        // Set user data
        userRef.setData([
            "email": Auth.auth().currentUser?.email ?? "",
            "problemsSolved": 0,
            "streak": 0,
            "lastProblemSolvedDate": ""
        ]) { error in
            if let error = error {
                print("Error adding user to Firestore: \(error.localizedDescription)")
            } else {
                print("User profile created in Firestore!")
            }
        }
    }
    
    func updateSignInState(user: GIDGoogleUser?) {
        self.isSignedIn = user != nil
    }
    
    func addListeners() {
        authStateListenerHandle = Auth.auth().addStateDidChangeListener { [weak self] auth, user in
            DispatchQueue.main.async {
                self?.user = user
                self?.isSignedIn = user != nil
            }
        }
    }
    
    func removeListeners() {
        if let handle = authStateListenerHandle {
            Auth.auth().removeStateDidChangeListener(handle)
        }
    }
    
    func signIn(email: String, password: String) {
        Auth.auth().signIn(withEmail: email, password: password) { [weak self] result, error in
            DispatchQueue.main.async {
                if let error = error {
                    print("Sign in error: \(error.localizedDescription)")
                    self?.authErrorMessage = error.localizedDescription
                } else {
                    print("User signed in: \(result?.user.uid ?? "")")
                    self?.user = result?.user
                    self?.isSignedIn = true
                    self?.createUserProfileInFirestore()
                }
            }
        }
    }
    func signOut() {
        do {
            try Auth.auth().signOut()
            GIDSignIn.sharedInstance.signOut()
            self.user = nil
            self.isSignedIn = false
            print("User signed out")
        } catch let error {
            print("Sign out error: \(error.localizedDescription)")
            authErrorMessage = error.localizedDescription
        }
    }
    func signUp(email: String, password: String, displayName: String) {
        Auth.auth().createUser(withEmail: email, password: password) { [weak self] result, error in
            DispatchQueue.main.async {
                if let error = error {
                    print("Sign up error: \(error.localizedDescription)")
                    self?.authErrorMessage = error.localizedDescription
                } else if let user = result?.user {
                    let changeRequest = user.createProfileChangeRequest()
                    changeRequest.displayName = displayName
                    changeRequest.commitChanges { error in
                        if let error = error {
                            print("Profile update error: \(error.localizedDescription)")
                            self?.authErrorMessage = error.localizedDescription
                        } else {
                            self?.user = Auth.auth().currentUser
                            self?.isSignedIn = true
                            print("User signed up and profile updated")
                            self?.createUserProfileInFirestore()
                        }
                    }
                }
            }
        }
    }
}



class UserStatsViewModel: ObservableObject {
    @Published var problemsSolved: Int = 0
    @Published var streak: Int = 0
    @Published var solvedProblemIDs: [String] = []

    private var db = Firestore.firestore()
    private var userID: String? {
        return Auth.auth().currentUser?.uid
    }

    func problemSolved(problemID: UUID) {
        guard let userID = userID else { return }
        let userRef = db.collection("users").document(userID)

        let currentDate = Date()
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd"
        let currentDateString = dateFormatter.string(from: currentDate)

        db.runTransaction { (transaction, errorPointer) -> Any? in
            let document: DocumentSnapshot
            do {
                document = try transaction.getDocument(userRef)
            } catch let fetchError {
                print("Failed to fetch document: \(fetchError)")
                return nil
            }

            var problemsSolved = document.data()?["problemsSolved"] as? Int ?? 0
            var streak = document.data()?["streak"] as? Int ?? 0
            let lastSolvedDate = document.data()?["lastProblemSolvedDate"] as? String ?? ""

            let calendar = Calendar.current
            if let lastDate = dateFormatter.date(from: lastSolvedDate) {
                let daysDifference = calendar.dateComponents([.day], from: lastDate, to: currentDate).day ?? 0
                streak = (daysDifference == 1) ? streak + 1 : 1
            } else {
                streak = 1
            }

            problemsSolved += 1

            transaction.updateData([
                "problemsSolved": problemsSolved,
                "streak": streak,
                "lastProblemSolvedDate": currentDateString,
                "solvedProblemIDs": FieldValue.arrayUnion([problemID.uuidString])
            ], forDocument: userRef)

            return nil
        } completion: { [weak self] (result, error) in
            if let error = error {
                print("Transaction failed: \(error.localizedDescription)")
            } else {
                DispatchQueue.main.async {
                    self?.problemsSolved += 1
//                    self?.streak = streak
                    self?.solvedProblemIDs.append(problemID.uuidString)
                }
            }
        }
    }

    func fetchUserStats() {
        guard let userID = userID else { return }
        let userRef = db.collection("users").document(userID)

        userRef.getDocument { [weak self] (document, error) in
            guard let self = self, let document = document, document.exists else {
                print("User stats not found")
                return
            }

            DispatchQueue.main.async {
                self.problemsSolved = document.data()?["problemsSolved"] as? Int ?? 0
                self.streak = document.data()?["streak"] as? Int ?? 0
                self.solvedProblemIDs = document.data()?["solvedProblemIDs"] as? [String] ?? []
            }
        }
    }
}

================
File: CodeBuilder.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved
================
{
  "originHash" : "7ed78cec4688813732ed048994a6c24c5c081e333197fce4007040cea0ee7d0c",
  "pins" : [
    {
      "identity" : "abseil-cpp-binary",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/google/abseil-cpp-binary.git",
      "state" : {
        "revision" : "194a6706acbd25e4ef639bcaddea16e8758a3e27",
        "version" : "1.2024011602.0"
      }
    },
    {
      "identity" : "app-check",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/google/app-check.git",
      "state" : {
        "revision" : "21fe1af9be463a359aaf8d96789ef73fc3760d09",
        "version" : "11.0.1"
      }
    },
    {
      "identity" : "appauth-ios",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/openid/AppAuth-iOS.git",
      "state" : {
        "revision" : "c89ed571ae140f8eb1142735e6e23d7bb8c34cb2",
        "version" : "1.7.5"
      }
    },
    {
      "identity" : "firebase-ios-sdk",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/firebase/firebase-ios-sdk",
      "state" : {
        "revision" : "f909f901bfba9e27e4e9da83242a4915d6dd64bb",
        "version" : "11.3.0"
      }
    },
    {
      "identity" : "googleappmeasurement",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/google/GoogleAppMeasurement.git",
      "state" : {
        "revision" : "93406fd21b85e66e2d6dbf50b472161fd75c3f1f",
        "version" : "11.3.0"
      }
    },
    {
      "identity" : "googledatatransport",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/google/GoogleDataTransport.git",
      "state" : {
        "revision" : "617af071af9aa1d6a091d59a202910ac482128f9",
        "version" : "10.1.0"
      }
    },
    {
      "identity" : "googlesignin-ios",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/google/GoogleSignIn-iOS",
      "state" : {
        "revision" : "65fb3f1aa6ffbfdc79c4e22178a55cd91561f5e9",
        "version" : "8.0.0"
      }
    },
    {
      "identity" : "googleutilities",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/google/GoogleUtilities.git",
      "state" : {
        "revision" : "53156c7ec267db846e6b64c9f4c4e31ba4cf75eb",
        "version" : "8.0.2"
      }
    },
    {
      "identity" : "grpc-binary",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/google/grpc-binary.git",
      "state" : {
        "revision" : "f56d8fc3162de9a498377c7b6cea43431f4f5083",
        "version" : "1.65.1"
      }
    },
    {
      "identity" : "gtm-session-fetcher",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/google/gtm-session-fetcher.git",
      "state" : {
        "revision" : "a2ab612cb980066ee56d90d60d8462992c07f24b",
        "version" : "3.5.0"
      }
    },
    {
      "identity" : "gtmappauth",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/google/GTMAppAuth.git",
      "state" : {
        "revision" : "5d7d66f647400952b1758b230e019b07c0b4b22a",
        "version" : "4.1.1"
      }
    },
    {
      "identity" : "interop-ios-for-google-sdks",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/google/interop-ios-for-google-sdks.git",
      "state" : {
        "revision" : "2d12673670417654f08f5f90fdd62926dc3a2648",
        "version" : "100.0.0"
      }
    },
    {
      "identity" : "leveldb",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/firebase/leveldb.git",
      "state" : {
        "revision" : "a0bc79961d7be727d258d33d5a6b2f1023270ba1",
        "version" : "1.22.5"
      }
    },
    {
      "identity" : "nanopb",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/firebase/nanopb.git",
      "state" : {
        "revision" : "b7e1104502eca3a213b46303391ca4d3bc8ddec1",
        "version" : "2.30910.0"
      }
    },
    {
      "identity" : "promises",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/google/promises.git",
      "state" : {
        "revision" : "540318ecedd63d883069ae7f1ed811a2df00b6ac",
        "version" : "2.4.0"
      }
    },
    {
      "identity" : "swift-protobuf",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/apple/swift-protobuf.git",
      "state" : {
        "revision" : "edb6ed4919f7756157fe02f2552b7e3850a538e5",
        "version" : "1.28.1"
      }
    }
  ],
  "version" : 3
}

================
File: CodeBuilder.xcodeproj/project.xcworkspace/contents.xcworkspacedata
================
<?xml version="1.0" encoding="UTF-8"?>
<Workspace
   version = "1.0">
   <FileRef
      location = "self:">
   </FileRef>
</Workspace>

================
File: CodeBuilder.xcodeproj/project.pbxproj
================
// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 77;
	objects = {

/* Begin PBXBuildFile section */
		9025D51B2CAC84FC000EFD32 /* FirebaseAuth in Frameworks */ = {isa = PBXBuildFile; productRef = 9025D51A2CAC84FC000EFD32 /* FirebaseAuth */; };
		9025D51D2CAC84FC000EFD32 /* FirebaseFirestore in Frameworks */ = {isa = PBXBuildFile; productRef = 9025D51C2CAC84FC000EFD32 /* FirebaseFirestore */; };
		9025D52C2CAC90DB000EFD32 /* FirebaseAnalytics in Frameworks */ = {isa = PBXBuildFile; productRef = 9025D52B2CAC90DB000EFD32 /* FirebaseAnalytics */; };
		9025D52F2CAC9129000EFD32 /* GoogleSignIn in Frameworks */ = {isa = PBXBuildFile; productRef = 9025D52E2CAC9129000EFD32 /* GoogleSignIn */; };
		9025D5312CAC9129000EFD32 /* GoogleSignInSwift in Frameworks */ = {isa = PBXBuildFile; productRef = 9025D5302CAC9129000EFD32 /* GoogleSignInSwift */; };
/* End PBXBuildFile section */

/* Begin PBXContainerItemProxy section */
		90AF37B92CA2E4F0006A4534 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 90AF37A02CA2E4EE006A4534 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = 90AF37A72CA2E4EE006A4534;
			remoteInfo = CodeBuilder;
		};
		90AF37C32CA2E4F0006A4534 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 90AF37A02CA2E4EE006A4534 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = 90AF37A72CA2E4EE006A4534;
			remoteInfo = CodeBuilder;
		};
/* End PBXContainerItemProxy section */

/* Begin PBXFileReference section */
		90AF37A82CA2E4EE006A4534 /* CodeBuilder.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = CodeBuilder.app; sourceTree = BUILT_PRODUCTS_DIR; };
		90AF37B82CA2E4F0006A4534 /* CodeBuilderTests.xctest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = CodeBuilderTests.xctest; sourceTree = BUILT_PRODUCTS_DIR; };
		90AF37C22CA2E4F0006A4534 /* CodeBuilderUITests.xctest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = CodeBuilderUITests.xctest; sourceTree = BUILT_PRODUCTS_DIR; };
/* End PBXFileReference section */

/* Begin PBXFileSystemSynchronizedBuildFileExceptionSet section */
		9025D5362CAC9329000EFD32 /* Exceptions for "CodeBuilder" folder in "CodeBuilder" target */ = {
			isa = PBXFileSystemSynchronizedBuildFileExceptionSet;
			membershipExceptions = (
				Info.plist,
			);
			target = 90AF37A72CA2E4EE006A4534 /* CodeBuilder */;
		};
/* End PBXFileSystemSynchronizedBuildFileExceptionSet section */

/* Begin PBXFileSystemSynchronizedRootGroup section */
		90AF37AA2CA2E4EE006A4534 /* CodeBuilder */ = {
			isa = PBXFileSystemSynchronizedRootGroup;
			exceptions = (
				9025D5362CAC9329000EFD32 /* Exceptions for "CodeBuilder" folder in "CodeBuilder" target */,
			);
			path = CodeBuilder;
			sourceTree = "<group>";
		};
		90AF37BB2CA2E4F0006A4534 /* CodeBuilderTests */ = {
			isa = PBXFileSystemSynchronizedRootGroup;
			path = CodeBuilderTests;
			sourceTree = "<group>";
		};
		90AF37C52CA2E4F0006A4534 /* CodeBuilderUITests */ = {
			isa = PBXFileSystemSynchronizedRootGroup;
			path = CodeBuilderUITests;
			sourceTree = "<group>";
		};
/* End PBXFileSystemSynchronizedRootGroup section */

/* Begin PBXFrameworksBuildPhase section */
		90AF37A52CA2E4EE006A4534 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				9025D5312CAC9129000EFD32 /* GoogleSignInSwift in Frameworks */,
				9025D51B2CAC84FC000EFD32 /* FirebaseAuth in Frameworks */,
				9025D52F2CAC9129000EFD32 /* GoogleSignIn in Frameworks */,
				9025D51D2CAC84FC000EFD32 /* FirebaseFirestore in Frameworks */,
				9025D52C2CAC90DB000EFD32 /* FirebaseAnalytics in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		90AF37B52CA2E4F0006A4534 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		90AF37BF2CA2E4F0006A4534 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		90AF379F2CA2E4EE006A4534 = {
			isa = PBXGroup;
			children = (
				90AF37AA2CA2E4EE006A4534 /* CodeBuilder */,
				90AF37BB2CA2E4F0006A4534 /* CodeBuilderTests */,
				90AF37C52CA2E4F0006A4534 /* CodeBuilderUITests */,
				90AF37A92CA2E4EE006A4534 /* Products */,
			);
			sourceTree = "<group>";
		};
		90AF37A92CA2E4EE006A4534 /* Products */ = {
			isa = PBXGroup;
			children = (
				90AF37A82CA2E4EE006A4534 /* CodeBuilder.app */,
				90AF37B82CA2E4F0006A4534 /* CodeBuilderTests.xctest */,
				90AF37C22CA2E4F0006A4534 /* CodeBuilderUITests.xctest */,
			);
			name = Products;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		90AF37A72CA2E4EE006A4534 /* CodeBuilder */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 90AF37CC2CA2E4F0006A4534 /* Build configuration list for PBXNativeTarget "CodeBuilder" */;
			buildPhases = (
				90AF37A42CA2E4EE006A4534 /* Sources */,
				90AF37A52CA2E4EE006A4534 /* Frameworks */,
				90AF37A62CA2E4EE006A4534 /* Resources */,
			);
			buildRules = (
			);
			dependencies = (
			);
			fileSystemSynchronizedGroups = (
				90AF37AA2CA2E4EE006A4534 /* CodeBuilder */,
			);
			name = CodeBuilder;
			packageProductDependencies = (
				9025D51A2CAC84FC000EFD32 /* FirebaseAuth */,
				9025D51C2CAC84FC000EFD32 /* FirebaseFirestore */,
				9025D52B2CAC90DB000EFD32 /* FirebaseAnalytics */,
				9025D52E2CAC9129000EFD32 /* GoogleSignIn */,
				9025D5302CAC9129000EFD32 /* GoogleSignInSwift */,
			);
			productName = CodeBuilder;
			productReference = 90AF37A82CA2E4EE006A4534 /* CodeBuilder.app */;
			productType = "com.apple.product-type.application";
		};
		90AF37B72CA2E4F0006A4534 /* CodeBuilderTests */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 90AF37CF2CA2E4F0006A4534 /* Build configuration list for PBXNativeTarget "CodeBuilderTests" */;
			buildPhases = (
				90AF37B42CA2E4F0006A4534 /* Sources */,
				90AF37B52CA2E4F0006A4534 /* Frameworks */,
				90AF37B62CA2E4F0006A4534 /* Resources */,
			);
			buildRules = (
			);
			dependencies = (
				90AF37BA2CA2E4F0006A4534 /* PBXTargetDependency */,
			);
			fileSystemSynchronizedGroups = (
				90AF37BB2CA2E4F0006A4534 /* CodeBuilderTests */,
			);
			name = CodeBuilderTests;
			packageProductDependencies = (
			);
			productName = CodeBuilderTests;
			productReference = 90AF37B82CA2E4F0006A4534 /* CodeBuilderTests.xctest */;
			productType = "com.apple.product-type.bundle.unit-test";
		};
		90AF37C12CA2E4F0006A4534 /* CodeBuilderUITests */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 90AF37D22CA2E4F0006A4534 /* Build configuration list for PBXNativeTarget "CodeBuilderUITests" */;
			buildPhases = (
				90AF37BE2CA2E4F0006A4534 /* Sources */,
				90AF37BF2CA2E4F0006A4534 /* Frameworks */,
				90AF37C02CA2E4F0006A4534 /* Resources */,
			);
			buildRules = (
			);
			dependencies = (
				90AF37C42CA2E4F0006A4534 /* PBXTargetDependency */,
			);
			fileSystemSynchronizedGroups = (
				90AF37C52CA2E4F0006A4534 /* CodeBuilderUITests */,
			);
			name = CodeBuilderUITests;
			packageProductDependencies = (
			);
			productName = CodeBuilderUITests;
			productReference = 90AF37C22CA2E4F0006A4534 /* CodeBuilderUITests.xctest */;
			productType = "com.apple.product-type.bundle.ui-testing";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		90AF37A02CA2E4EE006A4534 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				BuildIndependentTargetsInParallel = 1;
				LastSwiftUpdateCheck = 1600;
				LastUpgradeCheck = 1600;
				TargetAttributes = {
					90AF37A72CA2E4EE006A4534 = {
						CreatedOnToolsVersion = 16.0;
					};
					90AF37B72CA2E4F0006A4534 = {
						CreatedOnToolsVersion = 16.0;
						TestTargetID = 90AF37A72CA2E4EE006A4534;
					};
					90AF37C12CA2E4F0006A4534 = {
						CreatedOnToolsVersion = 16.0;
						TestTargetID = 90AF37A72CA2E4EE006A4534;
					};
				};
			};
			buildConfigurationList = 90AF37A32CA2E4EE006A4534 /* Build configuration list for PBXProject "CodeBuilder" */;
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = 90AF379F2CA2E4EE006A4534;
			minimizedProjectReferenceProxies = 1;
			packageReferences = (
				9025D5192CAC84FC000EFD32 /* XCRemoteSwiftPackageReference "firebase-ios-sdk" */,
				9025D52D2CAC9129000EFD32 /* XCRemoteSwiftPackageReference "GoogleSignIn-iOS" */,
			);
			preferredProjectObjectVersion = 77;
			productRefGroup = 90AF37A92CA2E4EE006A4534 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				90AF37A72CA2E4EE006A4534 /* CodeBuilder */,
				90AF37B72CA2E4F0006A4534 /* CodeBuilderTests */,
				90AF37C12CA2E4F0006A4534 /* CodeBuilderUITests */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		90AF37A62CA2E4EE006A4534 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		90AF37B62CA2E4F0006A4534 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		90AF37C02CA2E4F0006A4534 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		90AF37A42CA2E4EE006A4534 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		90AF37B42CA2E4F0006A4534 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		90AF37BE2CA2E4F0006A4534 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin PBXTargetDependency section */
		90AF37BA2CA2E4F0006A4534 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = 90AF37A72CA2E4EE006A4534 /* CodeBuilder */;
			targetProxy = 90AF37B92CA2E4F0006A4534 /* PBXContainerItemProxy */;
		};
		90AF37C42CA2E4F0006A4534 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = 90AF37A72CA2E4EE006A4534 /* CodeBuilder */;
			targetProxy = 90AF37C32CA2E4F0006A4534 /* PBXContainerItemProxy */;
		};
/* End PBXTargetDependency section */

/* Begin XCBuildConfiguration section */
		90AF37CA2CA2E4F0006A4534 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++20";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = YES;
				GCC_C_LANGUAGE_STANDARD = gnu17;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 18.0;
				LOCALIZATION_PREFERS_STRING_CATALOGS = YES;
				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
				MTL_FAST_MATH = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = iphoneos;
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = "DEBUG $(inherited)";
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
			};
			name = Debug;
		};
		90AF37CB2CA2E4F0006A4534 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++20";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = YES;
				GCC_C_LANGUAGE_STANDARD = gnu17;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 18.0;
				LOCALIZATION_PREFERS_STRING_CATALOGS = YES;
				MTL_ENABLE_DEBUG_INFO = NO;
				MTL_FAST_MATH = YES;
				SDKROOT = iphoneos;
				SWIFT_COMPILATION_MODE = wholemodule;
				VALIDATE_PRODUCT = YES;
			};
			name = Release;
		};
		90AF37CD2CA2E4F0006A4534 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME = AccentColor;
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				DEVELOPMENT_ASSET_PATHS = "\"CodeBuilder/Preview Content\"";
				DEVELOPMENT_TEAM = C6735YMRFQ;
				ENABLE_PREVIEWS = YES;
				GENERATE_INFOPLIST_FILE = YES;
				INFOPLIST_FILE = CodeBuilder/Info.plist;
				INFOPLIST_KEY_CFBundleDisplayName = "Code Builder";
				INFOPLIST_KEY_LSApplicationCategoryType = "public.app-category.education";
				INFOPLIST_KEY_UIApplicationSceneManifest_Generation = YES;
				INFOPLIST_KEY_UIApplicationSupportsIndirectInputEvents = YES;
				INFOPLIST_KEY_UILaunchScreen_Generation = YES;
				INFOPLIST_KEY_UISupportedInterfaceOrientations = UIInterfaceOrientationPortrait;
				INFOPLIST_KEY_UISupportedInterfaceOrientations_iPad = "UIInterfaceOrientationLandscapeLeft UIInterfaceOrientationLandscapeRight UIInterfaceOrientationPortrait UIInterfaceOrientationPortraitUpsideDown";
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.example.mgohacki.aperkel.CodeBuilder;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_EMIT_LOC_STRINGS = YES;
				SWIFT_VERSION = 5.0;
				TARGETED_DEVICE_FAMILY = "1,2";
			};
			name = Debug;
		};
		90AF37CE2CA2E4F0006A4534 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME = AccentColor;
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				DEVELOPMENT_ASSET_PATHS = "\"CodeBuilder/Preview Content\"";
				DEVELOPMENT_TEAM = C6735YMRFQ;
				ENABLE_PREVIEWS = YES;
				GENERATE_INFOPLIST_FILE = YES;
				INFOPLIST_FILE = CodeBuilder/Info.plist;
				INFOPLIST_KEY_CFBundleDisplayName = "Code Builder";
				INFOPLIST_KEY_LSApplicationCategoryType = "public.app-category.education";
				INFOPLIST_KEY_UIApplicationSceneManifest_Generation = YES;
				INFOPLIST_KEY_UIApplicationSupportsIndirectInputEvents = YES;
				INFOPLIST_KEY_UILaunchScreen_Generation = YES;
				INFOPLIST_KEY_UISupportedInterfaceOrientations = UIInterfaceOrientationPortrait;
				INFOPLIST_KEY_UISupportedInterfaceOrientations_iPad = "UIInterfaceOrientationLandscapeLeft UIInterfaceOrientationLandscapeRight UIInterfaceOrientationPortrait UIInterfaceOrientationPortraitUpsideDown";
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.example.mgohacki.aperkel.CodeBuilder;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_EMIT_LOC_STRINGS = YES;
				SWIFT_VERSION = 5.0;
				TARGETED_DEVICE_FAMILY = "1,2";
			};
			name = Release;
		};
		90AF37D02CA2E4F0006A4534 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				BUNDLE_LOADER = "$(TEST_HOST)";
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				DEVELOPMENT_TEAM = CRL2KQ855J;
				GENERATE_INFOPLIST_FILE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 18.0;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.example.mgohacki.CodeBuilderTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_EMIT_LOC_STRINGS = NO;
				SWIFT_VERSION = 5.0;
				TARGETED_DEVICE_FAMILY = "1,2";
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/CodeBuilder.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/CodeBuilder";
			};
			name = Debug;
		};
		90AF37D12CA2E4F0006A4534 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				BUNDLE_LOADER = "$(TEST_HOST)";
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				DEVELOPMENT_TEAM = CRL2KQ855J;
				GENERATE_INFOPLIST_FILE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 18.0;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.example.mgohacki.CodeBuilderTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_EMIT_LOC_STRINGS = NO;
				SWIFT_VERSION = 5.0;
				TARGETED_DEVICE_FAMILY = "1,2";
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/CodeBuilder.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/CodeBuilder";
			};
			name = Release;
		};
		90AF37D32CA2E4F0006A4534 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				DEVELOPMENT_TEAM = CRL2KQ855J;
				GENERATE_INFOPLIST_FILE = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.example.mgohacki.CodeBuilderUITests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_EMIT_LOC_STRINGS = NO;
				SWIFT_VERSION = 5.0;
				TARGETED_DEVICE_FAMILY = "1,2";
				TEST_TARGET_NAME = CodeBuilder;
			};
			name = Debug;
		};
		90AF37D42CA2E4F0006A4534 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				DEVELOPMENT_TEAM = CRL2KQ855J;
				GENERATE_INFOPLIST_FILE = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.example.mgohacki.CodeBuilderUITests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_EMIT_LOC_STRINGS = NO;
				SWIFT_VERSION = 5.0;
				TARGETED_DEVICE_FAMILY = "1,2";
				TEST_TARGET_NAME = CodeBuilder;
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		90AF37A32CA2E4EE006A4534 /* Build configuration list for PBXProject "CodeBuilder" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				90AF37CA2CA2E4F0006A4534 /* Debug */,
				90AF37CB2CA2E4F0006A4534 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		90AF37CC2CA2E4F0006A4534 /* Build configuration list for PBXNativeTarget "CodeBuilder" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				90AF37CD2CA2E4F0006A4534 /* Debug */,
				90AF37CE2CA2E4F0006A4534 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		90AF37CF2CA2E4F0006A4534 /* Build configuration list for PBXNativeTarget "CodeBuilderTests" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				90AF37D02CA2E4F0006A4534 /* Debug */,
				90AF37D12CA2E4F0006A4534 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		90AF37D22CA2E4F0006A4534 /* Build configuration list for PBXNativeTarget "CodeBuilderUITests" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				90AF37D32CA2E4F0006A4534 /* Debug */,
				90AF37D42CA2E4F0006A4534 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */

/* Begin XCRemoteSwiftPackageReference section */
		9025D5192CAC84FC000EFD32 /* XCRemoteSwiftPackageReference "firebase-ios-sdk" */ = {
			isa = XCRemoteSwiftPackageReference;
			repositoryURL = "https://github.com/firebase/firebase-ios-sdk";
			requirement = {
				kind = upToNextMajorVersion;
				minimumVersion = 11.3.0;
			};
		};
		9025D52D2CAC9129000EFD32 /* XCRemoteSwiftPackageReference "GoogleSignIn-iOS" */ = {
			isa = XCRemoteSwiftPackageReference;
			repositoryURL = "https://github.com/google/GoogleSignIn-iOS";
			requirement = {
				kind = upToNextMajorVersion;
				minimumVersion = 8.0.0;
			};
		};
/* End XCRemoteSwiftPackageReference section */

/* Begin XCSwiftPackageProductDependency section */
		9025D51A2CAC84FC000EFD32 /* FirebaseAuth */ = {
			isa = XCSwiftPackageProductDependency;
			package = 9025D5192CAC84FC000EFD32 /* XCRemoteSwiftPackageReference "firebase-ios-sdk" */;
			productName = FirebaseAuth;
		};
		9025D51C2CAC84FC000EFD32 /* FirebaseFirestore */ = {
			isa = XCSwiftPackageProductDependency;
			package = 9025D5192CAC84FC000EFD32 /* XCRemoteSwiftPackageReference "firebase-ios-sdk" */;
			productName = FirebaseFirestore;
		};
		9025D52B2CAC90DB000EFD32 /* FirebaseAnalytics */ = {
			isa = XCSwiftPackageProductDependency;
			package = 9025D5192CAC84FC000EFD32 /* XCRemoteSwiftPackageReference "firebase-ios-sdk" */;
			productName = FirebaseAnalytics;
		};
		9025D52E2CAC9129000EFD32 /* GoogleSignIn */ = {
			isa = XCSwiftPackageProductDependency;
			package = 9025D52D2CAC9129000EFD32 /* XCRemoteSwiftPackageReference "GoogleSignIn-iOS" */;
			productName = GoogleSignIn;
		};
		9025D5302CAC9129000EFD32 /* GoogleSignInSwift */ = {
			isa = XCSwiftPackageProductDependency;
			package = 9025D52D2CAC9129000EFD32 /* XCRemoteSwiftPackageReference "GoogleSignIn-iOS" */;
			productName = GoogleSignInSwift;
		};
/* End XCSwiftPackageProductDependency section */
	};
	rootObject = 90AF37A02CA2E4EE006A4534 /* Project object */;
}

================
File: CodeBuilderTests/CodeBuilderTests.swift
================
//
//  CodeBuilderTests.swift
//  CodeBuilderTests
//
//  Created by Miro Gohacki on 9/24/24.
//

import Testing
@testable import CodeBuilder

struct CodeBuilderTests {

    @Test func example() async throws {
        // Write your test here and use APIs like `#expect(...)` to check expected conditions.
    }

}

================
File: CodeBuilderUITests/CodeBuilderUITests.swift
================
//
//  CodeBuilderUITests.swift
//  CodeBuilderUITests
//
//  Created by Miro Gohacki on 9/24/24.
//

import XCTest

final class CodeBuilderUITests: XCTestCase {

    override func setUpWithError() throws {
        // Put setup code here. This method is called before the invocation of each test method in the class.

        // In UI tests it is usually best to stop immediately when a failure occurs.
        continueAfterFailure = false

        // In UI tests it’s important to set the initial state - such as interface orientation - required for your tests before they run. The setUp method is a good place to do this.
    }

    override func tearDownWithError() throws {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
    }

    @MainActor
    func testExample() throws {
        // UI tests must launch the application that they test.
        let app = XCUIApplication()
        app.launch()

        // Use XCTAssert and related functions to verify your tests produce the correct results.
    }

    @MainActor
    func testLaunchPerformance() throws {
        if #available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 7.0, *) {
            // This measures how long it takes to launch your application.
            measure(metrics: [XCTApplicationLaunchMetric()]) {
                XCUIApplication().launch()
            }
        }
    }
}

================
File: CodeBuilderUITests/CodeBuilderUITestsLaunchTests.swift
================
//
//  CodeBuilderUITestsLaunchTests.swift
//  CodeBuilderUITests
//
//  Created by Miro Gohacki on 9/24/24.
//

import XCTest

final class CodeBuilderUITestsLaunchTests: XCTestCase {

    override class var runsForEachTargetApplicationUIConfiguration: Bool {
        true
    }

    override func setUpWithError() throws {
        continueAfterFailure = false
    }

    @MainActor
    func testLaunch() throws {
        let app = XCUIApplication()
        app.launch()

        // Insert steps here to perform after app launch but before taking a screenshot,
        // such as logging into a test account or navigating somewhere in the app

        let attachment = XCTAttachment(screenshot: app.screenshot())
        attachment.name = "Launch Screen"
        attachment.lifetime = .keepAlways
        add(attachment)
    }
}

================
File: .gitignore
================
# Xcode
#
# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore

## User settings
xcuserdata/

## Obj-C/Swift specific
*.hmap

## App packaging
*.ipa
*.dSYM.zip
*.dSYM

## Playgrounds
timeline.xctimeline
playground.xcworkspace

# Swift Package Manager
#
# Add this line if you want to avoid checking in source code from Swift Package Manager dependencies.
# Packages/
# Package.pins
# Package.resolved
# *.xcodeproj
#
# Xcode automatically generates this directory with a .xcworkspacedata file and xcuserdata
# hence it is not needed unless you have added a package configuration file to your project
# .swiftpm

.build/

# CocoaPods
#
# We recommend against adding the Pods directory to your .gitignore. However
# you should judge for yourself, the pros and cons are mentioned at:
# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
#
# Pods/
#
# Add this line if you want to avoid checking in source code from the Xcode workspace
# *.xcworkspace

# Carthage
#
# Add this line if you want to avoid checking in source code from Carthage dependencies.
# Carthage/Checkouts

Carthage/Build/

# fastlane
#
# It is recommended to not store the screenshots in the git repo.
# Instead, use fastlane to re-generate the screenshots whenever they are needed.
# For more information about the recommended setup visit:
# https://docs.fastlane.tools/best-practices/source-control/#source-control

fastlane/report.xml
fastlane/Preview.html
fastlane/screenshots/**/*.png
fastlane/test_output

.DS_Store
CodeBuilder/.DS_Store
CodeBuilder/Views/.DS_Store
GoogleService-Info.plist
